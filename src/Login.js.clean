import React, { useState } from 'react';
import { Alert } from 'react-bootstrap';
import axios from 'axios';
import GoogleSignIn from './GoogleSignIn';
import { useToast } from "@chakra-ui/react";
import './LoginStyles.css';

function Login() {
  const [err, setErr] = useState();
  const [isLoginForm, setIsLoginForm] = useState(true);
  const [registered, setRegistered] = useState(false);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [name, setName] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [agreeTerms, setAgreeTerms] = useState(false);
  const toast = useToast();

  const toggleForm = () => {
    // Reset form fields when switching between login and signup
    setEmail('');
    setPassword('');
    setName('');
    setConfirmPassword('');
    setShowPassword(false);
    setShowConfirmPassword(false);
    setAgreeTerms(false);
    setErr(null);
    setIsLoginForm(!isLoginForm);
  };

  function handleRegister(event) {
    event.preventDefault();
    setLoading(true);
    
    if (password !== confirmPassword) {
      setErr('password-mismatch');
      setLoading(false);
      return;
    }
    
    if (!agreeTerms) {
      setErr('terms-required');
      setLoading(false);
      return;
    }
    
    axios
      .post("https://backend-retrend.onrender.com/register", {
        email,
        password,
        name,
      })
      .then((response) => {
        console.log(response.data);
        setRegistered(true);
        setLoading(false);
        toast({
          title: 'Account created.',
          description: "We've created your account for you.",
          status: 'success',
          duration: 9000,
          isClosable: true,
        });
        // Automatically switch to login form after successful registration
        setTimeout(() => {
          setIsLoginForm(true);
          setRegistered(false);
        }, 2000);
      })
      .catch((error) => {
        console.log(error);
        setLoading(false);
        if(error.response && error.response.status === 409){
          setErr(409);
        } else {
          setErr('server-error');
        }
      });
  }

  function handleLogin(event) {
    event.preventDefault();
    setLoading(true);
    
    if (!email || !password) {
      setErr('fields-required');
      setLoading(false);
      return;
    }
    
    axios
      .post("https://backend-retrend.onrender.com/login", {
        email: email,
        password: password,
      })
      .then((response) => {
        console.log(response.data);
        localStorage.setItem('authToken', response.data.token);
        localStorage.setItem('authemail', response.data.email);
        localStorage.setItem('authname', response.data.name);
        localStorage.setItem('authphone', response.data.phone);
        localStorage.setItem('authpicture', response.data.picture || "https://cdn-icons-png.flaticon.com/512/3135/3135715.png");
        window.location.href = '/';
      })
      .catch((error) => {
        console.log(error);
        setLoading(false);
        if(error.response && error.response.status === 404){
          setErr(404);
        }
        else if(error.response && error.response.status === 400){
          setErr(400);
        } else {
          setErr('server-error');
        }
      });
  }

  const togglePasswordVisibility = () => {
    setShowPassword(!showPassword);
  };

  const toggleConfirmPasswordVisibility = () => {
    setShowConfirmPassword(!showConfirmPassword);
  };

  return (
    <div className="login-form-wrapper">
      <div className="form-toggle">
        <button 
          className={isLoginForm ? 'active' : ''} 
          onClick={() => setIsLoginForm(true)}
        >
          LOGIN
        </button>
        <button 
          className={!isLoginForm ? 'active' : ''} 
          onClick={() => setIsLoginForm(false)}
        >
          REGISTER
        </button>
      </div>
      <div className="login-content">
        <div className="left-panel">
          <h1>{isLoginForm ? 'Welcome Back!' : 'Hello, Friend!'}</h1>
          <p>
            {isLoginForm 
              ? 'To keep connected with us please login with your personal info' 
              : 'Enter your personal details and start journey with us'}
          </p>
          
          <div className="social-container">
            <GoogleSignIn />
          </div>
          
          <div className="or-divider">
            <span>or</span>
          </div>
        </div>
        
        <div className="right-panel">
          {isLoginForm ? (
            /* Login Form */
            <form onSubmit={handleLogin}>
              <div className="form-group">
                <input 
                  type="email" 
                  placeholder="Email" 
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  required 
                  disabled={loading}
                />
              </div>
              <div className="form-group password-field-container">
                <input 
                  type={showPassword ? 'text' : 'password'} 
                  placeholder="Password" 
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  required 
                  disabled={loading}
                />
                <button 
                  type="button" 
                  className="password-toggle-btn"
                  onClick={togglePasswordVisibility}
                >
                  <i className={showPassword ? 'fa fa-eye-slash' : 'fa fa-eye'}></i>
                </button>
              </div>
              <div className="forgot-password">
                <a href="#">Forgot your password?</a>
              </div>
              {err === 404 && <div className="error-message">User not found</div>}
              {err === 400 && <div className="error-message">Incorrect password</div>}
              {err === 'fields-required' && <div className="error-message">Please fill in all fields</div>}
              {err === 'server-error' && <div className="error-message">Server error, please try again</div>}
              <button className="submit-btn" type="submit" disabled={loading}>
                {loading ? 'Processing...' : 'SIGN IN'}
              </button>
            </form>
          ) : (
            /* Register Form */
            <form onSubmit={handleRegister}>
              <div className="form-group">
                <input 
                  type="text" 
                  placeholder="Name" 
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                  required 
                  disabled={loading}
                />
              </div>
              <div className="form-group">
                <input 
                  type="email" 
                  placeholder="Email" 
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  required 
                  disabled={loading}
                />
              </div>
              <div className="form-group password-field-container">
                <input 
                  type={showPassword ? 'text' : 'password'} 
                  placeholder="Password" 
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  required 
                  disabled={loading}
                />
                <button 
                  type="button" 
                  className="password-toggle-btn"
                  onClick={togglePasswordVisibility}
                >
                  <i className={showPassword ? 'fa fa-eye-slash' : 'fa fa-eye'}></i>
                </button>
              </div>
              <div className="form-group password-field-container">
                <input 
                  type={showConfirmPassword ? 'text' : 'password'} 
                  placeholder="Confirm Password" 
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                  required 
                  disabled={loading}
                />
                <button 
                  type="button" 
                  className="password-toggle-btn"
                  onClick={toggleConfirmPasswordVisibility}
                >
                  <i className={showConfirmPassword ? 'fa fa-eye-slash' : 'fa fa-eye'}></i>
                </button>
              </div>
              <div className="terms-checkbox">
                <input 
                  type="checkbox" 
                  id="terms" 
                  checked={agreeTerms}
                  onChange={(e) => setAgreeTerms(e.target.checked)}
                  required 
                />
                <label htmlFor="terms">I have read and agree to the terms</label>
              </div>
              {err === 'password-mismatch' && <div className="error-message">Passwords do not match</div>}
              {err === 'terms-required' && <div className="error-message">You must agree to the terms</div>}
              {err === 409 && <div className="error-message">User already exists, please login</div>}
              {err === 'server-error' && <div className="error-message">Server error, please try again</div>}
              <button className="submit-btn" type="submit" disabled={loading}>
                {loading ? 'Processing...' : 'SIGN UP'}
              </button>
            </form>
          )}
        </div>
      </div>

      {/* Success Message */}
      {registered && (
        <div className="success-message">
          <Alert variant='success'>Registered successfully! Redirecting to login...</Alert>
        </div>
      )}
    </div>
  );
}

export default Login;
