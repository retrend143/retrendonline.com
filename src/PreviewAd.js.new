import React, { useState, useEffect } from "react";
import axios from "axios";
import { Link, useParams, useNavigate } from "react-router-dom";
import {
  Card,
  CardBody,
  CardFooter,
  CardHeader,
  Divider,
  Flex,
  Heading,
  Image,
  Stack,
  Text,
  useToast,
  Button,
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  Badge,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalFooter,
  ModalBody,
  ModalCloseButton,
  useDisclosure,
  Box,
} from "@chakra-ui/react";
import { Carousel } from "react-bootstrap";
import CurrencyRupeeTwoToneIcon from "@mui/icons-material/CurrencyRupeeTwoTone";
import { MDBCardImage, MDBCol, MDBRow } from "mdb-react-ui-kit";
import MapComponent from "./MapComponent";
import ChevronRightIcon from "@mui/icons-material/ChevronRight";
import Modallogin from "./Modallogin";
import Loading from "./resources/Loading";
import NotFoundComponent from "./resources/NotFound";
import { initializeRazorpay } from './razorpayUtils';
import FavoriteIcon from "@mui/icons-material/Favorite";
import FavoriteBorderIcon from "@mui/icons-material/FavoriteBorder";

const PreviewAd = ({auth}) => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [data, setData] = useState({});
  const [own, setOwn] = useState(false);
  const [loading, setLoading] = useState(true);
  const [NotFound, setNotFound] = useState(false);
  const [isRemoving, setIsRemoving] = useState(false);
  const authToken = localStorage.getItem("authToken");
  const toast = useToast();
  const { isOpen, onOpen, onClose } = useDisclosure();

  // for register and login
  const [staticModal, setStaticModal] = useState(false);
  const toggleShow = () => setStaticModal(!staticModal);

  const [isInWishlist, setIsInWishlist] = useState(false);
  const [isWishlistLoading, setIsWishlistLoading] = useState(false);

  const [userJoinDate, setUserJoinDate] = useState(null);

  const fetchData = async () => {
    try {
      const response = await axios.post(
        `https://retrand4.onrender.com/previewad/${id}`,
        {},
        {
          headers: {
            Authorization: `Bearer ${authToken}`,
          },
        }
      );
      setOwn(response.data.own);
      setData(response.data.product);
      
      // Extract user registration date if available
      if (response.data.userDetails && response.data.userDetails.createdAt) {
        const registrationDate = new Date(response.data.userDetails.createdAt);
        setUserJoinDate(registrationDate.getFullYear());
      } else if (response.data.product && response.data.product.ownerJoinDate) {
        const registrationDate = new Date(response.data.product.ownerJoinDate);
        setUserJoinDate(registrationDate.getFullYear());
      } else {
        // Fallback: Use current year for newly registered users
        setUserJoinDate(new Date().getFullYear());
      }
      
      setLoading(false); // Set loading state to false when data is fetched successfully
    } catch (error) {
      // console.error(error);
      // when not loged in
      // make changes for not loged in user as authToken is not updated so data is not recieved .
      setOwn(false);
      try{
        const notlogedindata = await axios.post(`https://retrand4.onrender.com/previewad/notloggedin/${id}`);
      setData(notlogedindata.data.product);
      
      // Extract user registration date if available
      if (notlogedindata.data.userDetails && notlogedindata.data.userDetails.createdAt) {
        const registrationDate = new Date(notlogedindata.data.userDetails.createdAt);
        setUserJoinDate(registrationDate.getFullYear());
      } else if (notlogedindata.data.product && notlogedindata.data.product.ownerJoinDate) {
        const registrationDate = new Date(notlogedindata.data.product.ownerJoinDate);
        setUserJoinDate(registrationDate.getFullYear());
      } else {
        // Fallback: Use current year for newly registered users
        setUserJoinDate(new Date().getFullYear());
      }
      
      setLoading(false); // Set loading state to false when data is fetched successfully
      }
      catch(e){
        setLoading(false);
        setNotFound(true); 
      }
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  useEffect(() => {
    const checkWishlistStatus = async () => {
      if (!authToken || !id) return;
      
      try {
        const response = await axios.get(`https://retrand4.onrender.com/wishlist/check/${id}`, {
          headers: {
            Authorization: `Bearer ${authToken}`,
          },
        });
        setIsInWishlist(response.data.inWishlist);
      } catch (error) {
        console.error("Error checking wishlist status:", error);
      }
    };
    
    checkWishlistStatus();
  }, [authToken, id]);

  const handlePromoteClick = () => {
    onOpen();
  };

  const handlePromoteConfirm = async () => {
    try {
      // Create Razorpay order
      const orderResponse = await axios.post(
        "https://retrand4.onrender.com/create-promotion-order",
        { productId: id },
        {
          headers: {
            Authorization: `Bearer ${authToken}`,
          },
        }
      );
      
      const { orderId, amount, currency, keyId } = orderResponse.data;
      
      // Configure Razorpay options
      const options = {
        key: keyId,
        amount: amount,
        currency: currency,
        name: "OLX Clone",
        description: "Product Promotion Payment",
        order_id: orderId,
        handler: async function (response) {
          try {
            // Verify payment with server
            const verifyResponse = await axios.post(
              "https://retrand4.onrender.com/verify-promotion-payment",
              {
                razorpay_payment_id: response.razorpay_payment_id,
                razorpay_order_id: response.razorpay_order_id,
                razorpay_signature: response.razorpay_signature,
                productId: id,
              },
              {
                headers: {
                  Authorization: `Bearer ${authToken}`,
                },
              }
            );
            
            // Update local state
            setData({
              ...data,
              isPromoted: true,
              promotionStartDate: new Date(),
              promotionEndDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)
            });
            
            toast({
              title: "Promotion Successful",
              description: "Your product will be displayed at the top with a 'Best One' label for 30 days.",
              status: "success",
              duration: 5000,
              isClosable: true,
            });
            
            onClose();
          } catch (error) {
            console.error("Payment verification error:", error);
            toast({
              title: "Payment Verification Failed",
              description: "There was an issue verifying your payment. Please contact support.",
              status: "error",
              duration: 5000,
              isClosable: true,
            });
          }
        },
        prefill: {
          name: "User",
          email: localStorage.getItem("userEmail") || "",
        },
        theme: {
          color: "#3399cc",
        },
      };
      
      // Initialize Razorpay
      try {
        await initializeRazorpay(options);
      } catch (error) {
        console.error("Razorpay initialization error:", error);
        toast({
          title: "Payment Failed",
          description: "Could not initialize payment gateway. Please try again later.",
          status: "error",
          duration: 5000,
          isClosable: true,
        });
      }
      
    } catch (error) {
      console.error("Promotion error:", error);
      toast({
        title: "Promotion Failed",
        description: "There was an issue creating the promotion order. Please try again.",
        status: "error",
        duration: 5000,
        isClosable: true,
      });
    }
  };

  if (loading) {
    return <Loading />;
  }
  if (NotFound) {
      return <NotFoundComponent />;
  }

  const handleRemove = async () => {
    try {
      setIsRemoving(true);
      await axios.delete(`https://retrand4.onrender.com/myads_delete/${id}`, {
        headers: {
          Authorization: `Bearer ${authToken}`,
        },
      });
      setIsRemoving(false);
      toast({
        title: "Ad Removed",
        description: "The ad has been successfully removed.",
        status: "success",
        duration: 3000,
        isClosable: true,
      });
      navigate("/myads");
    } catch (error) {
      console.error(error);
      setIsRemoving(false);
      toast({
        title: "Error",
        description: "There was an error removing the ad.",
        status: "error",
        duration: 3000,
        isClosable: true,
      });
    }
  };

  const handleClick = async function(){
    try {
      const token = localStorage.getItem("authToken");
      const response = await axios.post(
        "https://retrand4.onrender.com/chat/create",
        {
          productId: id,
          sellerId: data.useremail,
        },
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      navigate("/mychat");
    } catch (error) {
      console.error(error);
    }
  };

  const handleWishlistToggle = async () => {
    if (!authToken) {
      toast({
        title: "Authentication Required",
        description: "Please login to add items to your wishlist",
        status: "warning",
        duration: 3000,
        isClosable: true,
      });
      toggleShow(); // Show login modal if not logged in
      return;
    }

    try {
      setIsWishlistLoading(true);
      
      if (isInWishlist) {
        // Remove from wishlist
        await axios.delete(`https://retrand4.onrender.com/wishlist/remove/${id}`, {
          headers: {
            Authorization: `Bearer ${authToken}`,
          },
        });
        setIsInWishlist(false);
        toast({
          title: "Removed from Wishlist",
          status: "success",
          duration: 3000,
          isClosable: true,
        });
      } else {
        // Add to wishlist
        await axios.post(
          "https://retrand4.onrender.com/wishlist/add",
          { productId: id },
          {
            headers: {
              Authorization: `Bearer ${authToken}`,
            },
          }
        );
        setIsInWishlist(true);
        toast({
          title: "Added to Wishlist",
          status: "success",
          duration: 3000,
          isClosable: true,
        });
      }
    } catch (error) {
      console.error("Wishlist operation failed:", error);
      if (error.response?.status === 401) {
        toast({
          title: "Session Expired",
          description: "Please login again to update your wishlist",
          status: "error",
          duration: 3000,
          isClosable: true,
        });
        localStorage.removeItem("authToken");
        window.location.href = "/";
      } else if (error.response?.status === 400) {
        toast({
          title: "Error",
          description: error.response.data.message || "Failed to update wishlist",
          status: "error",
          duration: 3000,
          isClosable: true,
        });
      } else {
        toast({
          title: "Error",
          description: "Failed to update wishlist. Please try again.",
          status: "error",
          duration: 3000,
          isClosable: true,
        });
      }
    } finally {
      setIsWishlistLoading(false);
    }
  };

  return (
    <div>
      <Breadcrumb
        spacing="8px"
        separator={<ChevronRightIcon color="gray.500" />}
        className="mt-3 ms-3"
      >
        <BreadcrumbItem>
          <BreadcrumbLink as={Link} to="/">
            Home
          </BreadcrumbLink>
        </BreadcrumbItem>

        <BreadcrumbItem>
          <BreadcrumbLink as={Link} to={`/catagory/${data.catagory}`}>
            {data.catagory}
          </BreadcrumbLink>
        </BreadcrumbItem>

        <BreadcrumbItem isCurrentPage>
          <BreadcrumbLink>{data.subcatagory}</BreadcrumbLink>
        </BreadcrumbItem>
      </Breadcrumb>

      <MDBRow className="mt-3 mb-3">
        <MDBCol md="8">
          <Card>
            <CardBody>
              <Carousel>
                {data.productpic1 && (
                  <Carousel.Item>
                    <MDBCardImage
                      src={data.productpic1}
                      alt="First slide"
                      className="d-block w-100"
                      style={{ maxHeight: "500px", objectFit: "contain" }}
                    />
                  </Carousel.Item>
                )}
                {data.productpic2 && (
                  <Carousel.Item>
                    <MDBCardImage
                      src={data.productpic2}
                      alt="Second slide"
                      className="d-block w-100"
                      style={{ maxHeight: "500px", objectFit: "contain" }}
                    />
                  </Carousel.Item>
                )}
                {data.productpic3 && (
                  <Carousel.Item>
                    <MDBCardImage
                      src={data.productpic3}
                      alt="Third slide"
                      className="d-block w-100"
                      style={{ maxHeight: "500px", objectFit: "contain" }}
                    />
                  </Carousel.Item>
                )}
                {data.productpic4 && (
                  <Carousel.Item>
                    <MDBCardImage
                      src={data.productpic4}
                      alt="Fourth slide"
                      className="d-block w-100"
                      style={{ maxHeight: "500px", objectFit: "contain" }}
                    />
                  </Carousel.Item>
                )}
                {data.productpic5 && (
                  <Carousel.Item>
                    <MDBCardImage
                      src={data.productpic5}
                      alt="Fifth slide"
                      className="d-block w-100"
                      style={{ maxHeight: "500px", objectFit: "contain" }}
                    />
                  </Carousel.Item>
                )}
                {data.productpic6 && (
                  <Carousel.Item>
                    <MDBCardImage
                      src={data.productpic6}
                      alt="Sixth slide"
                      className="d-block w-100"
                      style={{ maxHeight: "500px", objectFit: "contain" }}
                    />
                  </Carousel.Item>
                )}
                {data.productpic7 && (
                  <Carousel.Item>
                    <MDBCardImage
                      src={data.productpic7}
                      alt="Seventh slide"
                      className="d-block w-100"
                      style={{ maxHeight: "500px", objectFit: "contain" }}
                    />
                  </Carousel.Item>
                )}
                {data.productpic8 && (
                  <Carousel.Item>
                    <MDBCardImage
                      src={data.productpic8}
                      alt="Eighth slide"
                      className="d-block w-100"
                      style={{ maxHeight: "500px", objectFit: "contain" }}
                    />
                  </Carousel.Item>
                )}
                {data.productpic9 && (
                  <Carousel.Item>
                    <MDBCardImage
                      src={data.productpic9}
                      alt="Ninth slide"
                      className="d-block w-100"
                      style={{ maxHeight: "500px", objectFit: "contain" }}
                    />
                  </Carousel.Item>
                )}
                {data.productpic10 && (
                  <Carousel.Item>
                    <MDBCardImage
                      src={data.productpic10}
                      alt="Tenth slide"
                      className="d-block w-100"
                      style={{ maxHeight: "500px", objectFit: "contain" }}
                    />
                  </Carousel.Item>
                )}
                {data.productpic11 && (
                  <Carousel.Item>
                    <MDBCardImage
                      src={data.productpic11}
                      alt="Eleventh slide"
                      className="d-block w-100"
                      style={{ maxHeight: "500px", objectFit: "contain" }}
                    />
                  </Carousel.Item>
                )}
                {data.productpic12 && (
                  <Carousel.Item>
                    <MDBCardImage
                      src={data.productpic12}
                      alt="Twelfth slide"
                      className="d-block w-100"
                      style={{ maxHeight: "500px", objectFit: "contain" }}
                    />
                  </Carousel.Item>
                )}
              </Carousel>
            </CardBody>
          </Card>
          <Card className="mt-3">
            <CardHeader>
              <Heading size="md">Details</Heading>
            </CardHeader>
            <CardBody>
              <Stack divider={<Divider />} spacing="4">
                <Box>
                  <Heading size="xs" textTransform="uppercase">
                    Price
                  </Heading>
                  <Text pt="2" fontSize="sm">
                    <CurrencyRupeeTwoToneIcon />
                    {data.price}
                    {data.isPromoted && (
                      <Badge colorScheme="green" ml={2}>
                        Best One
                      </Badge>
                    )}
                  </Text>
                </Box>
                <Box>
                  <Heading size="xs" textTransform="uppercase">
                    Description
                  </Heading>
                  <Text pt="2" fontSize="sm">
                    {data.description}
                  </Text>
                </Box>
              </Stack>
            </CardBody>
          </Card>
        </MDBCol>
        <MDBCol md="4">
          <Card>
            <CardHeader>
              <Heading size="md">Seller Information</Heading>
            </CardHeader>
            <CardBody>
              <Flex>
                <Image
                  borderRadius="full"
                  boxSize="50px"
                  src={data.ownerpicture}
                  alt={data.owner}
                  mr="12px"
                />
                <Stack>
                  <Heading size="sm">{data.owner}</Heading>
                  <Text>Member since {userJoinDate || new Date().getFullYear()}</Text>
                </Stack>
              </Flex>
            </CardBody>
            <CardFooter>
              {own ? (
                <Flex width="100%" justifyContent="space-between">
                  <Button
                    colorScheme="red"
                    onClick={handleRemove}
                    isLoading={isRemoving}
                  >
                    Remove Ad
                  </Button>
                  {!data.isPromoted && (
                    <Button
                      colorScheme="green"
                      onClick={handlePromoteClick}
                    >
                      Promote Ad
                    </Button>
                  )}
                </Flex>
              ) : (
                <Flex width="100%" justifyContent="space-between">
                  <Button
                    colorScheme="blue"
                    width="75%"
                    onClick={authToken ? handleClick : toggleShow}
                  >
                    Chat with Seller
                  </Button>
                  <Button
                    variant="solid"
                    size="md"
                    colorScheme={isInWishlist ? "red" : "pink"}
                    onClick={handleWishlistToggle}
                    isLoading={isWishlistLoading}
                    width="20%"
                  >
                    {isInWishlist ? <FavoriteIcon /> : <FavoriteBorderIcon />}
                    <Text ml={2}>Wishlist</Text>
                  </Button>
                </Flex>
              )}
            </CardFooter>
          </Card>
          <Card className="mt-3">
            <CardHeader>
              <Heading size="md">Posted in</Heading>
            </CardHeader>
            <CardBody>
              <Text>
                {data.address && data.address[0] && data.address[0].area},{" "}
                {data.address && data.address[0] && data.address[0].city},{" "}
                {data.address && data.address[0] && data.address[0].state},{" "}
                {data.address && data.address[0] && data.address[0].postcode}
              </Text>
              <MapComponent />
            </CardBody>
          </Card>
        </MDBCol>
      </MDBRow>

      {/* Promotion Modal */}
      <Modal isOpen={isOpen} onClose={onClose}>
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>Promote Your Product</ModalHeader>
          <ModalCloseButton />
          <ModalBody>
            <Text mb={4}>
              Promote your product for ₹30 to make it appear at the top of search results with a "Best One" label for 30 days.
            </Text>
            <Box p={4} borderWidth="1px" borderRadius="lg">
              <Text fontWeight="bold">{data.title}</Text>
              <Text>Price: ₹{data.price}</Text>
            </Box>
          </ModalBody>
          <ModalFooter>
            <Button colorScheme="blue" mr={3} onClick={handlePromoteConfirm}>
              Pay ₹30
            </Button>
            <Button variant="ghost" onClick={onClose}>Cancel</Button>
          </ModalFooter>
        </ModalContent>
      </Modal>

      {staticModal && <Modallogin toggleShow={toggleShow} />}
    </div>
  );
};

export default PreviewAd; 